@page "/editproduct/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase

<h3>Edit Product</h3>
<br />
@if (this.product is not null)
{
    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" class="form-control" @bind-Value="product.ProductName" />
            <ValidationMessage For="() => product.ProductName" />
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
            <ValidationMessage For="() => product.Quantity" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
            <ValidationMessage For="() => product.Price" />
        </div>

        <div class="form-group">
            <label for="price">Inventories</label>
            <ProductInventoriesComponent Product="this.product" />
        </div>

        <br />

        <button type="submit" class="btn btn-primary">Update</button>
        &nbsp;
        <a href="/products" class="btn btn-primary">Cancel</a>
    </EditForm>
}


@code {
    private Product? product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }

    private async Task Update()
    {
        if (product is not null)
        {
            await EditProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
