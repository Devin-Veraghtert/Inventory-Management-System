@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control" placeholder="Type something to search" @bind-value="this.searchFilter" @bind-value:event="oninput"/>
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories is not null && inventories.Count > 0)
{
    <div style="overflow-y:auto; max-height:300px; border:1px solid silver; padding-top:15px">
        <ul style="list-style-type: none">
            @foreach (var inventory in inventories)
            {
                <li @key="inventory.InventoryId" style="cursor: pointer">@inventory.InventoryName</li>
            }
        </ul>
    </div>
}

@code {
    private string _searchFilter;
    private string searchFilter
    {
        get => _searchFilter;
        set
        {
            _searchFilter = value;
            HandleSearch();
        }
    }

    private List<Inventory> inventories = new List<Inventory>();

    private async Task HandleSearch()
    {
        await Task.Delay(500); // simulate long load
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(this.searchFilter)).ToList();

        StateHasChanged();
    }
}
